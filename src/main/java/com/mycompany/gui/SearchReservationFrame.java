/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.gui;

import com.mycompany.gui.ReservationPanel.ReservationTableModel;
import com.mycompany.moviemanagementsystem.Constants;
import com.mycompany.moviemanagementsystem.Customer;
import com.mycompany.moviemanagementsystem.Movie;
import com.mycompany.moviemanagementsystem.Reservation;
import com.mycompany.moviemanagementsystem.Status;
import criteria.ReservationCriteria;
import criteria.ReservationCriteriaCustomerCode;
import criteria.ReservationCriteriaDate;
import criteria.ReservationCriteriaMovieCode;
import criteria.ReservationCriteriaStatus;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import validators.CustomerValidator;
import validators.DateValidator;
import validators.MovieValidator;

/**
 *
 * @author Vasilis
 */
public class SearchReservationFrame extends javax.swing.JFrame {
    
    private ArrayList<ReservationCriteria> criteria;
    private ArrayList<Reservation> reservations;
    private ArrayList<Reservation> filteredReservations;
    private ReservationTableModel reservationTableModel;
    private MovieValidator movieValidator;
    private CustomerValidator customerValidator;
    private DateValidator dateValidator;
    
    private ArrayList<JButton> buttonList;
    private ButtonListener buttonListener;

    /**
     * Creates new form SearchReservationFrame
     */
    public SearchReservationFrame(ArrayList<JButton> buttonList, ArrayList<Reservation> reservations, ArrayList<Reservation> filteredReservations, ReservationTableModel reservationTableModel) {
        initComponents();
        initComboBoxValues();
        initButtonListener();
        
        this.buttonList = buttonList;
        this.reservations = reservations;
        this.filteredReservations = filteredReservations;
        this.reservationTableModel = reservationTableModel;
        
        movieValidator = new MovieValidator();
        customerValidator = new CustomerValidator();
        dateValidator = new DateValidator();
        criteria = new ArrayList<ReservationCriteria>();
        
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    
    private void initComboBoxValues(){
        statusComboBox.addItem(" ");
        statusComboBox.addItem(Constants.ONGOING);
        statusComboBox.addItem(Constants.DUE);
        statusComboBox.addItem(Constants.OVERDUE);
        statusComboBox.addItem(Constants.CANCELED);
        statusComboBox.addItem(Constants.COMPLETED);
    }
    
    private void initButtonListener(){
        buttonListener = new ButtonListener();
        searchButton.addActionListener(buttonListener);
        clearFieldsButton.addActionListener(buttonListener);
        cancelButton.addActionListener(buttonListener);
    }
    
    private void clearFields(){
        movieCodeField.setText("");
        customerCodeField.setText("");
        fromDateField.setText("");
        toDateField.setText("");
        statusComboBox.setSelectedIndex(0);
    }
    
    private Date getDateFromString(String dateString){
        Date date;
        try {
            date = new SimpleDateFormat("dd-MM-yyyy").parse(dateString);
            return date;
        } catch (ParseException ex) {
            return null;
        }
    }
    
    private String formattedDate(Date date){
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        String formattedFromDate = simpleDateFormat.format(date);
        return formattedFromDate;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        movieCodeLabel = new javax.swing.JLabel();
        movieCodeField = new javax.swing.JTextField();
        customerCodeLabel = new javax.swing.JLabel();
        customerCodeField = new javax.swing.JTextField();
        fromDateLabel = new javax.swing.JLabel();
        fromDateField = new javax.swing.JTextField();
        toDateLabel = new javax.swing.JLabel();
        toDateField = new javax.swing.JTextField();
        reservationStatusLabel = new javax.swing.JLabel();
        statusComboBox = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        clearFieldsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        movieCodeLabel.setText("Movie code:");

        customerCodeLabel.setText("Customer code:");

        fromDateLabel.setText("From date:");

        toDateLabel.setText("To date:");

        reservationStatusLabel.setText("Status:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(movieCodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(customerCodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fromDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(reservationStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(customerCodeField)
                                .addComponent(fromDateField)
                                .addComponent(toDateField, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(movieCodeField)))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(movieCodeLabel)
                    .addComponent(movieCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerCodeLabel)
                    .addComponent(customerCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fromDateLabel)
                    .addComponent(fromDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toDateLabel)
                    .addComponent(toDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reservationStatusLabel)
                    .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        searchButton.setText("Search");

        cancelButton.setText("Cancel");

        clearFieldsButton.setText("Clear");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clearFieldsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton)
                    .addComponent(cancelButton)
                    .addComponent(clearFieldsButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(SearchReservationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(SearchReservationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(SearchReservationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(SearchReservationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new SearchReservationFrame().setVisible(true);
//            }
//        });
//    }
    
    class ButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent event) {
            Object source = event.getSource();
            if(source == searchButton){
                String movieCode = movieCodeField.getText();
                String customerCode = customerCodeField.getText();
                String fromDateString = fromDateField.getText();
                String toDateString = toDateField.getText();
                if(movieCode.length() > 0){
                    criteria.add(new ReservationCriteriaMovieCode(movieCode));
                    System.out.println("Movie criteria added.");
                }
                if(customerCode.length() > 0){
                    criteria.add(new ReservationCriteriaCustomerCode(customerCode));
                    System.out.println("Customer criteria added.");
                }
                if(dateValidator.isValidDate(fromDateString) && dateValidator.isValidDate(toDateString)){
                    if(fromDateString.length() > 0 && toDateString.length() > 0){
                        Date fromDate = getDateFromString(fromDateString);
                        Date toDate = getDateFromString(toDateString);
                        if(fromDate.compareTo(toDate) == 0){
                            criteria.add(new ReservationCriteriaDate(fromDate, fromDate, Constants.EQ));
                            System.out.println("Equal date criteria added.");
                        }
                        else {
                            criteria.add(new ReservationCriteriaDate(fromDate, toDate, Constants.RANGE));
                            System.out.println("Range criteria added.");
                        }
                    }
                    else if(fromDateString.length() > 0 && toDateString.length() == 0){
                        Date fromDate = getDateFromString(fromDateString);
                        criteria.add(new ReservationCriteriaDate(fromDate,null,Constants.MEQ));
                        System.out.println("Greater or equal criteria added.");
                    }
                    else if(fromDateString.length() == 0 && toDateString.length() > 0){
                        Date toDate = getDateFromString(toDateString);
                        criteria.add(new ReservationCriteriaDate(null,toDate,Constants.LEQ));
                        System.out.println("Less or equal criteria added.");
                    }
                }
                if(statusComboBox.getSelectedIndex() != 0){
                    String status = (String)statusComboBox.getSelectedItem();
                    criteria.add(new ReservationCriteriaStatus(status));
                    System.out.println("Status criteria added.");
                }
                
                System.out.println("Reservations size: " + reservations.size());
                filteredReservations = new ArrayList<>(reservations);
                if(criteria.size() > 0){
                  for(ReservationCriteria reservationCriteria : criteria){
                    filteredReservations = reservationCriteria.meetCriteria(filteredReservations);
                  }  
                }
             
                System.out.println("Filtered results: " + filteredReservations.size());
                reservationTableModel.setRowCount(0);
                for(Reservation reservation : filteredReservations){
                    String finalFromDateString = formattedDate(reservation.getStartDate());
                    String finalToDateString = formattedDate(reservation.getEndDate());
                    
                    reservationTableModel.addRow(new Object[]{false,
                        reservation.getCustomer().getCode(),
                        reservation.getMovie().getCode(),
                        finalFromDateString,
                        finalToDateString,
                        reservation.getStatusString()
                    });
                }
                Status.showInfoMessage(Constants.FILTERED_RESULTS);
            }
            if(source == cancelButton){
                dispose();
            }
            if(source == clearFieldsButton){
                clearFields();
            }
        } 
    }
    
    class FieldListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent event) {
            if(movieCodeField.hasFocus()){
                if(!movieValidator.isValidCode(movieCodeField.getText())){
                    Status.showErrorMessage(Constants.INVALID_CODE);
                    movieCodeField.setText("");
                }
                else customerCodeField.requestFocus();
            }
            if(customerCodeField.hasFocus()){
                if(customerValidator.isValidCode(customerCodeField.getText())){
                    Status.showErrorMessage(Constants.INVALID_CUSTOMER_CODE);
                    customerCodeField.setText("");
                }
                else fromDateField.requestFocus();
            }
            if(fromDateField.hasFocus()){
                if(dateValidator.isValidDate(fromDateField.getText())){
                    toDateField.requestFocus();
                }
                else Status.showErrorMessage(Constants.INVALID_DATE);
            }
            if(toDateField.hasFocus()){
                if(!dateValidator.isValidDate(toDateField.getText())){
                    Status.showErrorMessage(Constants.INVALID_DATE);
                }
            }
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearFieldsButton;
    private javax.swing.JTextField customerCodeField;
    private javax.swing.JLabel customerCodeLabel;
    private javax.swing.JTextField fromDateField;
    private javax.swing.JLabel fromDateLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField movieCodeField;
    private javax.swing.JLabel movieCodeLabel;
    private javax.swing.JLabel reservationStatusLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<String> statusComboBox;
    private javax.swing.JTextField toDateField;
    private javax.swing.JLabel toDateLabel;
    // End of variables declaration//GEN-END:variables
}
